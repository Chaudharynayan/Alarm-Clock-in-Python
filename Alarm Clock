import datetime
import tkinter as tk
from tkinter import messagebox
import winsound

SNOOZE_DURATION = 300  # 5 minutes

def set_alarm():
    try:
        alarm_time = datetime.datetime.strptime(entry.get(), "%H:%M").time()
        current_time = datetime.datetime.now().time()

        if alarm_time < current_time:
            time_difference = datetime.timedelta(days=1) - (current_time - alarm_time)
        else:
            time_difference = datetime.timedelta(seconds=(alarm_time.hour - current_time.hour) * 3600 +
                                                       (alarm_time.minute - current_time.minute) * 60)

        print("Current Time:", current_time)
        print("Alarm Time:", alarm_time)
        print("Time Difference:", time_difference)
        messagebox.showinfo("Alarm Set", f"Alarm set for {alarm_time.strftime('%H:%M')}")

        root.after(int(time_difference.total_seconds() * 1000), ring_alarm)
    except ValueError:
        messagebox.showerror("Error", "Please enter time in HH:MM format")

def snooze_alarm():
    new_alarm_time = datetime.datetime.now() + datetime.timedelta(seconds=SNOOZE_DURATION)
    print("Snooze: Next Alarm at", new_alarm_time.strftime('%H:%M'))
    messagebox.showinfo("Snooze", f"Alarm snoozed. Next alarm at {new_alarm_time.strftime('%H:%M')}")
    root.after(SNOOZE_DURATION * 1000, ring_alarm)

def ring_alarm():
    global alarm_playing
    alarm_playing = True
    messagebox.showinfo("Alarm", "Wake up!")
    winsound.PlaySound("SystemExclamation", winsound.SND_ALIAS)

def stop_alarm():
    global alarm_playing
    if alarm_playing:
        winsound.PlaySound(None, winsound.SND_PURGE)  # Stop any currently playing sound
        alarm_playing = False

root = tk.Tk()
root.title("Python Alarm Clock")

label = tk.Label(root, text="Enter alarm time (HH:MM):")
label.pack()

entry = tk.Entry(root)
entry.pack()

set_button = tk.Button(root, text="Set Alarm", command=set_alarm)
set_button.pack()

snooze_button = tk.Button(root, text="Snooze", command=snooze_alarm)
snooze_button.pack()

stop_button = tk.Button(root, text="Stop Alarm", command=stop_alarm)
stop_button.pack()

alarm_playing = False  # Flag to track if alarm is currently playing

root.mainloop()
